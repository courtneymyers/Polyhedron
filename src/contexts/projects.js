// @flow

import React from 'react';
// types
import type { Node } from 'react';
// databases
import firebase from 'databases/firebase.js';

// --- contexts
export const ProjectsContext = React.createContext();

// --- components
type Props = {
  children: Node,
};

export type ProjectProps = {|
  id: string,
  time: number,
  title: string,
  desc: string,
  blockIds: Array<string>,
|};

type State = {
  projects: Array<ProjectProps>,
  activeProjectId: string,
};

export class ProjectsProvider extends React.Component<Props, State> {
  dbProjects: Object; // firebase database reference
  dbActiveProject: Object; // firebase database reference
  addProject: () => void;
  removeProject: (string) => void;
  updateProjectFieldText: (string, string, string) => void;
  setActiveProjectId: (string) => void;
  addBlockToProject: () => void;

  constructor(props: Props) {
    super(props);
    this.state = {
      projects: [],
      activeProjectId: '',
    };

    this.dbProjects = firebase.database().ref('projects');
    this.dbActiveProject = firebase.database().ref('activeProject');

    this.addProject = () => {
      const currentTime = new Date().getTime();

      // -----------------------------------------------------------------------
      // --- add project to firebase and set it as the active project ----------
      // -----------------------------------------------------------------------
      const newProject = this.dbProjects.push({
        time: currentTime,
        title: '',
        desc: '',
        blockIds: [],
      });

      this.dbActiveProject.set(newProject.key);
      // -----------------------------------------------------------------------

      // this.setState((prevState) => ({
      //   projects: prevState.projects.concat({
      //     id: currentTime.toString(),
      //     time: currentTime,
      //     title: '',
      //     desc: '',
      //     blockIds: [],
      //   }),
      //   activeProjectId: currentTime.toString(),
      // }));
    };

    this.removeProject = (projectId) => {
      // -----------------------------------------------------------------------
      // --- remove project from firebase --------------------------------------
      // -----------------------------------------------------------------------
      const dbProject = firebase.database().ref(`projects/${projectId}`);
      dbProject.remove();
      // -----------------------------------------------------------------------

      // this.setState((prevState) => ({
      //   projects: prevState.projects.filter(
      //     (project) => project.id !== projectId,
      //   ),
      // }));
    };

    this.updateProjectFieldText = (projectId, fieldName, text) => {
      // -----------------------------------------------------------------------
      // --- update project field in firebase ----------------------------------
      // -----------------------------------------------------------------------
      firebase
        .database()
        .ref(`projects/${projectId}/${fieldName}`)
        .set(text);
      // -----------------------------------------------------------------------

      // this.setState((prevState) => {
      //   const projects = [...prevState.projects];
      //   projects.filter((p) => p.id === projectId)[0][fieldName] = text;
      //   return {
      //     projects: projects,
      //   };
      // });
    };

    this.setActiveProjectId = (projectId) => {
      // -----------------------------------------------------------------------
      // --- set active project in firebase ------------------------------------
      // -----------------------------------------------------------------------
      this.dbActiveProject.set(projectId);
      // -----------------------------------------------------------------------

      // this.setState((prevState) => ({
      //   activeProjectId: projectId,
      // }));
    };

    this.addBlockToProject = () => {
      // TODO: add method logic
    };
  }

  componentDidMount() {
    // -------------------------------------------------------------------------
    // --- get projects and active project from firebase -----------------------
    // -------------------------------------------------------------------------
    this.dbProjects.on('value', (snapshot) => {
      const projects = snapshot.val();
      let updatedProjects = [];
      for (let projectId in projects) {
        // projectId is the key auto-generated by firebase
        updatedProjects.push({
          id: projectId,
          time: projects[projectId].time,
          title: projects[projectId].title,
          desc: projects[projectId].desc,
          blockIds: [],
        });
      }

      this.setState((prevState) => ({
        projects: updatedProjects,
      }));
    });

    this.dbActiveProject.on('value', (snapshot) => {
      this.setState((prevState) => ({
        activeProjectId: snapshot.val(),
      }));
    });
    // -------------------------------------------------------------------------
  }

  render() {
    return (
      <ProjectsContext.Provider
        value={{
          ...this.state,
          addProject: this.addProject,
          removeProject: this.removeProject,
          updateProjectFieldText: this.updateProjectFieldText,
          setActiveProjectId: this.setActiveProjectId,
        }}
      >
        {this.props.children}
      </ProjectsContext.Provider>
    );
  }
}
